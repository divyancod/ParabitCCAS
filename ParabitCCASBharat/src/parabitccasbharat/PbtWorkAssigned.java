/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parabitccasbharat;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class PbtWorkAssigned extends javax.swing.JDialog implements MouseListener{

    /**
     * Creates new form PbtWorkAssigned
     */
    PbtEmpDashBoard empdashboard;
    ParabitDBC db;
    DefaultTableModel upertablemodel,lowertablemodel;
    int framecheck;/// 1<--from normal appoint employee see 2<-- transfer/dismiss  3<-- transfer single level 4<-- transfer second level 5<-- dismiss new assignment
    public PbtWorkAssigned(PbtEmpDashBoard parent, boolean modal,int framecheck) {
        super(parent, modal);
        initComponents();
        setTitle("Assigned work");
        empdashboard=parent;
        db=new ParabitDBC();
        this.framecheck=framecheck;
        upertablemodel=(DefaultTableModel)upperemployeetable.getModel();
        lowertablemodel=(DefaultTableModel)loweremptable.getModel();
        setEmployeeTable();
        upperemployeetable.addMouseListener(this);
        loweremptable.addMouseListener(this);
        
    }
    private void setEmployeeTable()
    {
        int count=1;
        upertablemodel.setRowCount(0);
        String query="SELECT pbtempschecdule.CEID,sum(pbtempschecdule.TotalRes) as totalloted,count(DISTINCT pbtempschecdule.City_Vill) as totcity,count(DISTINCT pbtempschecdule.wardno) as totward,pbtemployeetable.EmpName,pbtempschecdule.DateOfIssue FROM `pbtempschecdule` left join pbtemployeetable on pbtempschecdule.CEID=pbtemployeetable.CEID where pbtempschecdule.CRepEmpID='"+empdashboard.empdata.getEmpid()+"' GROUP BY pbtempschecdule.CEID";
        try
        {
            db.rs1=db.stm.executeQuery(query);
            while(db.rs1.next())
            {
                Object ob[]={count++,db.rs1.getString("ceid"),db.rs1.getString("empname"),db.rs1.getString("totcity"),db.rs1.getString("totward"),db.rs1.getString("totalloted")};
                upertablemodel.addRow(ob);
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    
    }
    private void setSecondTable(String ceid)
    {
        lowertablemodel.setRowCount(0);
        int count=1;
        String query="SELECT * FROM `pbtempschecdule` left join pbtenum on pbtempschecdule.City_Vill=pbtenum.Town_Vill and pbtempschecdule.WardNo=pbtenum.Ward WHERE ceid='"+ceid+"'";
        try
        {
            System.out.println(query);
            db.rs2=db.stm.executeQuery(query);
            while(db.rs2.next())
            {
                Object ob[]={count++,db.rs2.getString("town_vill"),db.rs2.getString("ward"),db.rs2.getString("level"),db.rs2.getString("name"),db.rs2.getString("TotPoulation"),db.rs2.getString("totalres")};
                lowertablemodel.addRow(ob);
            }
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        upperemployeetable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        loweremptable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        upperemployeetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sno", "CEID", "Name", "Total City", "Total Wards", "Total Population Alloted"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(upperemployeetable);
        if (upperemployeetable.getColumnModel().getColumnCount() > 0) {
            upperemployeetable.getColumnModel().getColumn(0).setMinWidth(50);
            upperemployeetable.getColumnModel().getColumn(0).setMaxWidth(55);
        }

        loweremptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Sno", "Town/Village", "Ward", "Level", "Name", "Total Population", "Total Alloted"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(loweremptable);
        if (loweremptable.getColumnModel().getColumnCount() > 0) {
            loweremptable.getColumnModel().getColumn(0).setMinWidth(40);
            loweremptable.getColumnModel().getColumn(0).setMaxWidth(45);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1459, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PbtWorkAssigned.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PbtWorkAssigned.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PbtWorkAssigned.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PbtWorkAssigned.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable loweremptable;
    private javax.swing.JTable upperemployeetable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        int clickcount=e.getClickCount();
        int row=0;
        if(e.getSource()==upperemployeetable)
        {
            row=upperemployeetable.rowAtPoint(e.getPoint());
            String ceid=upertablemodel.getValueAt(row,1).toString();
            setSecondTable(ceid);
        }
        if(framecheck==2)
        {
            if(clickcount==2)
            {
                if(e.getSource()==upperemployeetable)
                {
                    //--- upper table transfer work
                    row=upperemployeetable.rowAtPoint(e.getPoint());
                    String[] listoptions = {"Transfer Employee", "Dismiss Employee"}; 
                    int option = JOptionPane.showOptionDialog(null,"Currently selected "+upertablemodel.getValueAt(row,2), "Select Operation",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,listoptions,null);
                    if(option==0)
                    {
                        setVisible(false);
                        PbtWorkAssigned nob=new PbtWorkAssigned(empdashboard, true,3);
                        nob.setLocationRelativeTo(null);
                        nob.setVisible(true);
                        setVisible(true);
                    }else if(option==1)
                    {   
                        //dismiss here
                    }
                }else if(e.getSource()==loweremptable)
                {
                    //lower table transfer table
                    row=loweremptable.rowAtPoint(e.getPoint());
                    int option = JOptionPane.showConfirmDialog(null,"Do You want to allot "+lowertablemodel.getValueAt(row,4)+" area to some other employee?","Confirm Transfer",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if(option ==0)
                    {
                        setVisible(false);
                        PbtWorkAssigned nob=new PbtWorkAssigned(empdashboard, true,4);
                        nob.setLocationRelativeTo(null);
                        nob.setVisible(true);
                        setVisible(true);
                    }else if(option ==1)
                    {

                    }
                }
            }
        }else if(framecheck==3)
        {
            if(clickcount==2 && e.getSource()==upperemployeetable)
            {
                row=upperemployeetable.rowAtPoint(e.getPoint());
                int option = JOptionPane.showConfirmDialog(null,"You are about to transfer","Confirm Transfer",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
                if(option==0)
                {
                    System.out.println("transfering all the work");
                }else if(option==1)
                {
                    
                }
            }
        }else if(framecheck==4)
        {
            if(e.getSource()==loweremptable)
            {
                row=loweremptable.rowAtPoint(e.getPoint());
                int option = JOptionPane.showConfirmDialog(null,"You are about to remove this particular area","Confirm Transfer",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
                System.out.println("output here");
                
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }
}
