/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parabitccasbharat;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class PbtEmployeeSummary extends javax.swing.JDialog implements MouseListener {

    /**
     * Creates new form PbtEmployeeSummary
     */
    PbtEmpDashBoard pbtempdashboard;
    DefaultTableModel maintablemodel,secondtablemodel;
    ParabitDBC db;
    ArrayList<String> ceid,juniorceid;
    int framecount;
    public PbtEmployeeSummary(PbtEmpDashBoard parent, boolean modal,int framecount) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Employee Summary");
        pbtempdashboard=parent;
        maintablemodel=new DefaultTableModel();
        secondtablemodel=new DefaultTableModel();
        db=new ParabitDBC();
        maintablemodel=(DefaultTableModel)maintable.getModel();
        secondtablemodel=(DefaultTableModel)secondtable.getModel();
        ceid=new ArrayList<String>();
        juniorceid=new ArrayList<String>();
        setTable();
        this.framecount=framecount;
        secondtable.setVisible(false);
        maintable.addMouseListener(this);
        secondtable.addMouseListener(this);
    }
    private void setTable()
    {
        String te1="";
        int i=1;
        maintablemodel.setRowCount(0);
        String query="select * from pbtemployeetable where crepempid='"+pbtempdashboard.empdata.getEmpid()+"' and status='1'";
        try
        {
            db.rs1=db.stm.executeQuery(query);
            while(db.rs1.next())
            {
                Object ob[]={i++,db.rs1.getString("areastate"),db.rs1.getString("areadist"),db.rs1.getString("areacity"),db.rs1.getString("empname"),
                            db.rs1.getString("empmob"),"-","-","-"};
                te1=db.rs1.getString("areastate")+"-"+db.rs1.getString("areadist")+"-"+db.rs1.getString("areacity");
                ceid.add(db.rs1.getString("ceid"));
                maintablemodel.addRow(ob);
            }
            db.rs1.close();
        }catch(Exception e)
        {
            e.printStackTrace();
        } 
        t1.setText(te1);
        
    }
    private void setSecondTable(int id)
    {
        int counter=1;
        secondtablemodel.setRowCount(0);
        juniorceid.clear();
        String query="";
        if(pbtempdashboard.empdata.getEmpgrade()==3)
        {
  //select pbtempschecdule.*,pbtenum.* from pbtempschecdule INNER JOIN pbtenum ON pbtempschecdule.City_Vill=pbtenum.Town_Vill and pbtempschecdule.WardNo = pbtenum.Ward where CRepEmpID='41690'
           query = "select pbtempschecdule.*,pbtenum.* from pbtempschecdule INNER JOIN pbtenum ON pbtempschecdule.City_Vill=pbtenum.Town_Vill and pbtempschecdule.WardNo = pbtenum.Ward";
            query +=" where CRepEmpID='"+ceid.get(id)+"'";
        }else
        {
         query="select * from pbtemployeetable where crepempid='"+ceid.get(id)+"' and status='1'";
        }
        try
        {
            System.err.println(query);
            db.rs2=db.stm.executeQuery(query);
            while(db.rs2.next())
            {
                if(pbtempdashboard.empdata.getEmpgrade()==3)
                {
                    String totalRes=db.rs2.getString("TotalRes");
                String formfilled=db.rs2.getString("FormFilled");
                int pending = Integer.parseInt(totalRes)-Integer.parseInt(formfilled);
                Object ob[]={counter++,db.rs2.getString("State"),db.rs2.getString("Dist"),db.rs2.getString("Name"),db.rs2.getString("CEID"),
                           db.rs2.getString("DateOfWorkStart"),db.rs2.getString("TotalRes"),db.rs2.getString("FormFilled"),pending};
                juniorceid.add(db.rs2.getString("ceid"));
                secondtablemodel.addRow(ob);
                }else
                {
                    Object ob[]={counter++,db.rs2.getString("areastate"),db.rs2.getString("areadist"),db.rs2.getString("areacity"),db.rs2.getString("empname"),
                            db.rs2.getString("empmob"),"-","-","-"};
                juniorceid.add(db.rs2.getString("ceid"));
                secondtablemodel.addRow(ob);
                }
                
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        secondtable.setVisible(true);
    }
    private void swapModel()
    {
        System.out.println("helo");
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        secondtable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        maintable = new javax.swing.JTable();
        t1 = new javax.swing.JLabel();
        a1 = new javax.swing.JLabel();
        t2 = new javax.swing.JLabel();
        a2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        secondtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sno", "State", "District", "City", "EmployeeName", "Mobile Number", "Work Alloted", "Work Perfomed", "Work Pending"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(secondtable);
        if (secondtable.getColumnModel().getColumnCount() > 0) {
            secondtable.getColumnModel().getColumn(0).setMinWidth(40);
            secondtable.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        maintable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sno", "State", "District", "City", "EmployeeName", "Mobile Number", "Work Alloted", "Work Performed", "Work Pending"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        maintable.setToolTipText("");
        jScrollPane2.setViewportView(maintable);
        if (maintable.getColumnModel().getColumnCount() > 0) {
            maintable.getColumnModel().getColumn(0).setMinWidth(40);
            maintable.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        t1.setText("PCO working under you");

        a1.setText("AREA");

        t2.setText("charge");

        a2.setText("ARea");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1209, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(t1)
                                .addGap(278, 278, 278)
                                .addComponent(a1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(t2)
                                .addGap(371, 371, 371)
                                .addComponent(a2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a1)
                    .addComponent(t1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t2)
                    .addComponent(a2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel a1;
    private javax.swing.JLabel a2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable maintable;
    private javax.swing.JTable secondtable;
    private javax.swing.JLabel t1;
    private javax.swing.JLabel t2;
    // End of variables declaration//GEN-END:variables
@Override
public void mouseClicked(MouseEvent m)
{
    int count=m.getClickCount();
    int row;
    if(m.getSource()==maintable && count==1)
    {
       row=maintable.rowAtPoint(m.getPoint()); 
       setSecondTable(row);
    }
    if(m.getSource()==maintable && count==2 && framecount==2)
    {
        row=maintable.rowAtPoint(m.getPoint()); 
        System.out.print("hello");
        PbtMessageFrame nob=new PbtMessageFrame(pbtempdashboard, true,1);
        nob.setName(ceid.get(row), maintablemodel.getValueAt(row, 4).toString());
        nob.setLocationRelativeTo(null);
        nob.setVisible(true);
    }
    if(m.getSource()==secondtable && framecount==2 & count==2)
    {
        row=secondtable.rowAtPoint(m.getPoint()); 
        PbtMessageFrame nob=new PbtMessageFrame(pbtempdashboard, true,1);
        nob.setName(juniorceid.get(row), secondtablemodel.getValueAt(row, 4).toString());
        nob.setLocationRelativeTo(null);
        nob.setVisible(true);
    }
    else if(m.getSource()==secondtable && framecount==2 && count==1)
    {
        swapModel();
    }
    
}
@Override
public void mousePressed(MouseEvent m){}
@Override
public void mouseEntered(MouseEvent m){}
@Override
public void mouseExited(MouseEvent m){}
@Override
public void mouseReleased(MouseEvent m){}
}
